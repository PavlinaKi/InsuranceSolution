// <auto-generated />
using System;
using InsuranceSolution.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuranceSolution.Persistence.Migrations
{
    [DbContext(typeof(InsuranceSolutionDbContext))]
    partial class InsuranceSolutionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Claims.Claim", b =>
                {
                    b.Property<Guid>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccidentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccidentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AccidentRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnnouncementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClaimStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CompensationAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompensationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClaimId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Claim", (string)null);

                    b.HasData(
                        new
                        {
                            ClaimId = new Guid("f53401de-f34f-4cc2-870b-f3feef2936e1"),
                            AccidentAddress = "Egnatias 100",
                            AccidentDate = new DateTime(2025, 4, 3, 21, 0, 0, 0, DateTimeKind.Utc),
                            AccidentRegion = "Thessaloniki",
                            AnnouncementDate = new DateTime(2025, 4, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            ClaimStatus = "Open",
                            CompensationAmount = 100m,
                            CompensationDate = new DateTime(2025, 4, 8, 21, 0, 0, 0, DateTimeKind.Utc),
                            PolicyId = new Guid("54ad9cc6-96a3-4214-8086-b6ab689ec36d")
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GovernmentID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<Guid?>("InsurerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Profession")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("CustomerId");

                    b.HasIndex("InsurerId");

                    b.HasIndex("VatNumber");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("c5198e12-e205-4c62-83b0-b84237063c8b"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateOnly(1985, 5, 20),
                            FirstName = "John",
                            Gender = 1,
                            GovernmentID = "AB123456",
                            InsurerId = new Guid("86e6cbcb-a869-4438-8081-60d8771d1d13"),
                            LastName = "Doe",
                            Nationality = "Greek",
                            Profession = "Engineer",
                            SocialSecurityNumber = "12345678989",
                            TaxOffice = "Athens Center",
                            VatNumber = "123456789"
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.CustomerAddress", b =>
                {
                    b.Property<Guid>("CustomerAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prefecture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerAddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Customer_Address", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerAddressId = new Guid("c5c6a7e3-20cb-444a-860b-9b9e3f22c77c"),
                            Address = "Ermou 15",
                            AddressType = 1,
                            City = "Athens",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("c5198e12-e205-4c62-83b0-b84237063c8b"),
                            Prefecture = "Attica",
                            ZipCode = "10563"
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.CustomerEmail", b =>
                {
                    b.Property<Guid>("CustomerEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmailType")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerEmailId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Customer_Email", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerEmailId = new Guid("f197b8c2-1233-4146-99a5-f2cef9f7fa39"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("c5198e12-e205-4c62-83b0-b84237063c8b"),
                            EmailAddress = "john.doe@example.com",
                            EmailType = 1
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.CustomerPhone", b =>
                {
                    b.Property<Guid>("CustomerPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PhoneCategory")
                        .HasColumnType("int");

                    b.Property<int>("PhoneType")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CustomerPhoneId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Customer_Phone", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerPhoneId = new Guid("f15e5e51-62d9-4d67-9b57-f11517132af3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("c5198e12-e205-4c62-83b0-b84237063c8b"),
                            PhoneCategory = 1,
                            PhoneType = 1,
                            Telephone = "6981234567"
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Insurers.Insurer", b =>
                {
                    b.Property<Guid>("InsurerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsurerCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("InsurerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InsurerId");

                    b.HasIndex("InsurerCode");

                    b.ToTable("Insurer", (string)null);

                    b.HasData(
                        new
                        {
                            InsurerId = new Guid("86e6cbcb-a869-4438-8081-60d8771d1d13"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsurerCode = "SLI001",
                            InsurerName = "SafeLife Insurance"
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Insurers.InsurerEmail", b =>
                {
                    b.Property<Guid>("InsurerEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("InsurerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InsurerEmailId");

                    b.HasIndex("InsurerId");

                    b.ToTable("Insurer_Email", (string)null);

                    b.HasData(
                        new
                        {
                            InsurerEmailId = new Guid("4866f931-c4f1-4651-89c4-f7bad696f0fa"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "support@safelife.gr",
                            InsurerId = new Guid("86e6cbcb-a869-4438-8081-60d8771d1d13")
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Insurers.InsurerPhone", b =>
                {
                    b.Property<Guid>("InsurerTelephoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsurerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telephone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("phoneCategory")
                        .HasColumnType("int");

                    b.HasKey("InsurerTelephoneId");

                    b.HasIndex("InsurerId");

                    b.ToTable("Insurer_Phone", (string)null);

                    b.HasData(
                        new
                        {
                            InsurerTelephoneId = new Guid("1f906a63-baf2-4bab-af37-0b9967ba2974"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsurerId = new Guid("86e6cbcb-a869-4438-8081-60d8771d1d13"),
                            Telephone = "2101234567",
                            phoneCategory = 1
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Policies.Policy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddendumNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrossPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Plates")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("PolicySector")
                        .HasColumnType("int");

                    b.Property<string>("RenewalNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PolicyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PolicyNumber");

                    b.ToTable("Policy", (string)null);

                    b.HasData(
                        new
                        {
                            PolicyId = new Guid("54ad9cc6-96a3-4214-8086-b6ab689ec36d"),
                            AddendumNumber = "ADD001",
                            CustomerId = new Guid("c5198e12-e205-4c62-83b0-b84237063c8b"),
                            EndDate = new DateTime(2024, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            GrossPrice = 600m,
                            IsCanceled = false,
                            IsExpired = false,
                            NetPrice = 500m,
                            Plates = "ΙΝΖ1234",
                            PolicyNumber = "POL123456",
                            PolicySector = 1,
                            RenewalNumber = "REN001",
                            StartDate = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Claims.Claim", b =>
                {
                    b.HasOne("InsuranceSolution.Domain.Entities.Policies.Policy", "Policy")
                        .WithMany("Claim")
                        .HasForeignKey("PolicyId");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.Customer", b =>
                {
                    b.HasOne("InsuranceSolution.Domain.Entities.Insurers.Insurer", "Insurer")
                        .WithMany("Customer")
                        .HasForeignKey("InsurerId");

                    b.Navigation("Insurer");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.CustomerAddress", b =>
                {
                    b.HasOne("InsuranceSolution.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.CustomerEmail", b =>
                {
                    b.HasOne("InsuranceSolution.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("CustomerEmail")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.CustomerPhone", b =>
                {
                    b.HasOne("InsuranceSolution.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("CustomerPhone")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Insurers.InsurerEmail", b =>
                {
                    b.HasOne("InsuranceSolution.Domain.Entities.Insurers.Insurer", "Insurer")
                        .WithMany("InsurerEmail")
                        .HasForeignKey("InsurerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurer");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Insurers.InsurerPhone", b =>
                {
                    b.HasOne("InsuranceSolution.Domain.Entities.Insurers.Insurer", "Insurer")
                        .WithMany("InsurerPhone")
                        .HasForeignKey("InsurerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurer");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Policies.Policy", b =>
                {
                    b.HasOne("InsuranceSolution.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("Policies")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("CustomerAddress");

                    b.Navigation("CustomerEmail");

                    b.Navigation("CustomerPhone");

                    b.Navigation("Policies");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Insurers.Insurer", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("InsurerEmail");

                    b.Navigation("InsurerPhone");
                });

            modelBuilder.Entity("InsuranceSolution.Domain.Entities.Policies.Policy", b =>
                {
                    b.Navigation("Claim");
                });
#pragma warning restore 612, 618
        }
    }
}
